parameters:
- name: SF_CLIENT_ID
  type: string 
- name: SF_USERNAME
  type: string
- name: SF_LOGIN_URL
  type: string
- name: SECURE_FILE_NAME
  type: string
- name: PR_MERGED
  type: boolean
  default: false

jobs:
  - job: buildJob
    steps:
      - script: echo build Job 
        displayName: Print Information
      - script: |
          echo Add other tasks to build, test, and deploy your project.
          echo See https://aka.ms/yaml
        displayName: multi-line commands
      - script: |
          npm install @salesforce/cli --global
          sf --version
        displayName: Install Salesforce CLI
      - checkout: self
        fetchDepth: 0
        displayName: Checkout to the correct commit
      
      - script: |
          echo $(SF_CLIENT_ID)
          echo $(SF_LOGIN_URL)
          echo $(SF_USERNAME)
          echo $(SECURE_FILE_NAME)
          echo $(PR_MERGED)
        displayName: Print Variables & Secrets

      - task: DownloadSecureFile@1
        name: commonsecureFile
        displayName: Download the OPEN SSL Certificate Key file
        inputs:
          secureFile: ${{ parameters.SECURE_FILE_NAME }}

      - script: sf org login jwt --username $(SF_USERNAME) --jwt-key-file $(commonsecureFile.secureFilePath) --client-id $(SF_CLIENT_ID) --set-default --alias ci-org --instance-url $(SF_LOGIN_URL)
        displayName: Authenticate with Salesforce 

      - script: sf apex run test --target-org ci-org --test-level RunLocalTests --code-coverage --result-format human -d ./ --wait 10
        displayName: Run the Existing Test Cases

      - task: PythonScript@0
        inputs:
          scriptSource: 'filePath'
          scriptPath: 'CODE_COVERAGE.py'
        displayName: Run Code Coverage Check
      
      - script: |
          sf plugins install @salesforce/sfdx-scanner
        displayName: Install SF CLI Scanner

      - script: |
          mkdir reports
          sf scanner run --format html --target force-app/main/default/classes --engine pmd,pmd-appexchange --category Design,Best Practices, Code Style,Performance,Security,Documentation, Error Prone --outfile reports/scan-reports.html
        displayName: Run SF CLI Scan Report 

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          ArtifactName: drop
        displayName: Publish Build Artifacts
          
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)/reports
          artifact: SF_CLI_SCAN_REPORT
        displayName: Publish SF CLI Scan Report

      - script: echo 'y' | sf plugins install sfdx-git-delta
        displayName: Install SFDX GIT Delta 

      - script: |
          mkdir delta
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output "./delta" --generate-delta --ignore-whitespace --ignore .sgdignore
          echo "--- package.xml generated with added and modified metadata ---"
          cat delta/package/package.xml
          echo "--- destructiveChanges.xml ---"
          cat delta/destructiveChanges/destructiveChanges.xml
        displayName: Generate the Delata for deployment

      ## Check if there are destructive changes --> Deploy
      ## Check if there are added/modified changes --> deploy

      - script: |
          if grep -q '<types>' delta/destructiveChanges/destructiveChanges.xml ; then
            echo "---- Deploying with Pre Destructive Changes  ----"
            sf project deploy start --target-org ci-org --manifest delta/destructiveChanges/package.xml --pre-destructive-changes "delta/destructiveChanges/destructiveChanges.xml"
          else
            echo "---- No Destructive Changes changes to deploy before deployment ----"
          fi 
        displayName: Deploy the Destructive Changes
        condition: eq('${{ parameters.PR_MERGED }}', 'true')
        
      - script: |
          if grep -q '<types>' delta/destructiveChanges/destructiveChanges.xml ; then
            echo "---- Deploying with Pre Destructive Changes  ----"
            sf project deploy start --target-org ci-org --manifest delta/destructiveChanges/package.xml --pre-destructive-changes "delta/destructiveChanges/destructiveChanges.xml" --dry-run
          else
            echo "---- No Destructive Changes changes to deploy before deployment ----"
          fi 
        displayName: Deploy the Destructive Changes
        condition: eq('${{ parameters.PR_MERGED }}', 'false')
        
      - script: |
          if grep -q '<types>' delta/package/package.xml ; then
            echo "---- validating added and modified metadata ----"
            sf project deploy start --source-dir delta/force-app --target-org ci-org --wait 10
          else
            echo "---- No changes to validate ----"
          fi
        displayName: Deploy the Changes
        condition: eq('${{ parameters.PR_MERGED }}', 'true')

      - script: |
          if grep -q '<types>' delta/package/package.xml ; then
            echo "---- validating added and modified metadata ----"
            sf project deploy start --source-dir delta/force-app --target-org ci-org --wait 10 --dry-run
          else
            echo "---- No changes to validate ----"
          fi
        displayName: Deploy the Changes
        condition: eq('${{ parameters.PR_MERGED }}', 'false')

      - script: |
          if grep -q '<types>' destructiveChanges/postDestructiveChanges.xml ; then
            echo "---- validating added and modified metadata ----"
            sf project deploy start --target-org ci-org --manifest destructiveChanges/package.xml --pre-destructive-changes "destructiveChanges/postDestructiveChanges.xml" --dry-run
          else
            echo "---- No changes to validate ----"
          fi
        displayName: Deploy the Post destructiveChanges
        condition: eq('${{ parameters.PR_MERGED }}', 'false')

      - script: |
          if grep -q '<types>' destructiveChanges/postDestructiveChanges.xml ; then
            echo "---- validating added and modified metadata ----"
            sf project deploy start --target-org ci-org --manifest destructiveChanges/package.xml --pre-destructive-changes "destructiveChanges/postDestructiveChanges.xml"
          else
            echo "---- No changes to validate ----"
          fi
        displayName: Deploy the Post destructiveChanges
        condition: eq('${{ parameters.PR_MERGED }}', 'true')